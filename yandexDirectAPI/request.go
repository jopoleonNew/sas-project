package yad

import (
	"bytes"
	"encoding/json"
	"errors"
	"io/ioutil"
	"net/http"
	"strings"
)

var YandexQueue = make(chan YandexRequest, 5)

type YandexRequest struct {
	in  *http.Request
	out chan *http.Response
	err chan error
}

// InitRequestQueue starts infinite for-loop that waits request from YandexQueue channel and Does it.
func InitRequestQueue() {
	go func() {
		for r := range YandexQueue {
			client := &http.Client{}
			resp, err := client.Do(r.in)
			if err != nil {
				r.err <- err
			}
			r.out <- resp
		}
	}()
}

func (a *Account) Request(url string, fieldNames []string) ([]byte, error) {
	req := &RequestV5{
		Method: "get",
		ParamsV5: &ParamsV5{
			SelectionCriteria: struct{}{},
			FieldNames:        fieldNames,
		},
	}

	reqbytes, err := json.Marshal(req)
	if err != nil {
		return nil, errors.New("json.Marshal error: " + err.Error())
	}

	client := &http.Client{}
	r, err := http.NewRequest("POST", url, bytes.NewBuffer(reqbytes))
	if err != nil {
		return nil, errors.New("http.NewRequest error: " + err.Error())
	}

	r.Header.Add("Content-Type", "application/json")
	r.Header.Add("Accept-Language", "ru")
	r.Header.Add("Client-Login", a.Login)
	r.Header.Add("Authorization", "Bearer "+a.OAuthToken)
	r.Header.Add("Client-ID", application.ID)

	//log.Println("makeV5GetRequest body Request: ", r)

	resp, err := client.Do(r)

	if err != nil {
		return nil, errors.New("http.Request.Do error: " + err.Error())
	}
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, errors.New("ioutil.ReadAll error: " + err.Error())
	}
	if string(body) == "" {
		return nil, errors.New("makeV5GetRequest body response is empty")
	}
	//log.Println("makeV5GetRequest Response: ", string(body))
	if strings.Contains(string(body), "error") {
		var errresult = YandexV5Error{}
		err := json.Unmarshal(body, &errresult)
		if err != nil {
			return nil, errors.New("makeV5GetRequest json.Unmarshal error:  " + err.Error())
		}
		return body, errors.New("makeV5GetRequest Yandex Direct API error: " + errresult.ErrorCode + errresult.ErrorString + errresult.ErrorDescription + errresult.RequsetID + string(body))
	}
	//log.Println("makeV5GetRequest body response: ", string(body))
	return body, nil
}

type RequestV4 struct {
	Method  string   `json:"method"`
	Token   string   `json:"token"`
	ParamV4 *ParamV4 `json:"param"`
}

type ParamV4 struct {
	CampaignIDS []int  `json:"CampaignIDS"`
	StartDate   string `json:"StartDate"`
	EndDate     string `json:"EndDate"`
}

type RequestV5 struct {
	Method   string    `json:"method"`
	ParamsV5 *ParamsV5 `json:"params"`
}

type ParamsV5 struct {
	SelectionCriteria struct{} `json:"SelectionCriteria"`
	FieldNames        []string `json:"FieldNames"`
}

type ResultV5 struct {
	Result struct {
		Campaigns []Campaign `json:"campaigns,omitempty"`
		Clients   []ClientAg `json:"clients,omitempty"`
	} `json:"result"`
}

type YadCampaigns []struct {
	Camp Campaign
}

type AutoGenerated struct {
	Result struct {
		Campaigns []struct {
			Status string `json:"Status"`
			ID     int    `json:"Id"`
			Name   string `json:"Name"`
		} `json:"Campaigns"`
	} `json:"result"`
}

type ClientAg struct {
	Login           string           `json:"login"`
	Representatives []Representative `json:"representatives"`
}

type Representative struct {
	Email string `json:"email"`
	Login string `json:"login"`
	Role  string `json:"role"`
}

type ResultV4CampStat struct {
	Data []CampaignStat `json:"Data"`
}

// YandexTokenbody is used in MakeYandexOauthRequest()
// to unmarshal yandex response body and get AccessToken
type YandexTokenbody struct {
	TokenType    string `json:"token_type"`
	AccessToken  string `json:"access_token"`
	ExpiresIn    int    `json:"expires_in"`
	RefreshToken string `json:"refresh_token"`
}

type YandexV5Error struct {
	ErrorDescription string `json:"error_description"`
	ErrorCode        string `json:"error_code"`
	ErrorString      string `json:"error_string"`
	RequsetID        string `json:"request_id"`
}

//"error_str":"Authorization error","error_code":53,"error_detail":""
type YandexV4Error struct {
	ErrorDescription string `json:"error_str"`
	ErrorDetail      string `json:"error_detail"`
	ErrorCode        int    `json:"error_code"`
}

//YandexDirectAPI V5 Error
// "error" : {
// "request_id": "8695244274068608439",
// "error_code": 54,
// "error_string": "No rights",
// "error_detail": "No rights to indicated client"
// }
// Python example
//"Ошибка API
// {$apiErr->error_code}: " +
//"{$apiErr->error_string} - " +
//"{$apiErr->error_detail} " +
//"(RequestId: {$apiErr->request_id})"

//YandexDirectAPI V4 Error
//, "API error:"
//, "Code: ".$result->{error_code}
//, "Describe: ".$result->{error_str}
//, "Detail:".($result->{error_detail} || '');

type GetSummaryStatRes struct {
	Data []StatisticDataType `json:"Data"`
}

type StatisticDataType struct {
	SessionDepthSearch    interface{} `json:"SessionDepthSearch"`
	SumSearch             float32     `json:"SumSearch"`
	ClicksContext         int         `json:"ClicksContext"`
	SessionDepthContext   interface{} `json:"SessionDepthContext"`
	StatDate              YandexTime  `json:"StatDate"`
	GoalCostSearch        interface{} `json:"GoalCostSearch"`
	GoalConversionContext interface{} `json:"GoalConversionContext"`
	ShowsContext          interface{} `json:"ShowsContext"`
	SumContext            interface{} `json:"SumContext"`
	GoalConversionSearch  interface{} `json:"GoalConversionSearch"`
	ShowsSearch           interface{} `json:"ShowsSearch"`
	CampaignID            int         `json:"CampaignID"`
	GoalCostContext       interface{} `json:"GoalCostContext"`
	ClicksSearch          int         `json:"ClicksSearch"`
}

//implementing Sort.sort interface for GetSummaryStatRes struct
func (p GetSummaryStatRes) Len() int {
	return len(p.Data)
}

func (p GetSummaryStatRes) Less(i, j int) bool {
	return p.Data[i].StatDate.Time.Before(p.Data[j].StatDate.Time)
}

func (p GetSummaryStatRes) Swap(i, j int) {
	p.Data[i], p.Data[j] = p.Data[j], p.Data[i]
}

//////

//////

type ParamType struct {
	CampaignIDS []string `json:"CampaignIDS"`
	StartDate   string   `json:"StartDate"`
	EndDate     string   `json:"EndDate"`
}
